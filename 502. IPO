贪心最初版本
struct p {
	int pro, ca, flag;
	bool operator<(p p1) {
		if (flag<0 && p1.flag>0) return false;
		if (flag>0 && p1.flag<0) return true;
		if (flag>0 && p1.flag>0) {
			return pro>p1.pro;
		}
		return false;
	}
};
class Solution {
public:

	int findMaximizedCapital(int k, int W, vector<int>& Profits, vector<int>& Capital) {
		int length = Profits.size();
		p pp[51000];
		for (int i = 0; i<length; i++) {
			pp[i].pro = Profits[i];
			pp[i].ca = Capital[i];
			if (W >= pp[i].ca) {
				pp[i].flag = 1;
			}
			else {
				pp[i].flag = -1;
			}
		}
		for (int i = 0; i<k; i++) {
			sort(pp, pp + length);
			p& a = pp[0];
			if (a.flag<0) return W;
			
			W += a.pro;
			a.flag = -2;

			for (int j = 1; j<length; j++) {
				if (pp[j].ca <= W&&pp[j].flag == -1) pp[j].flag = 1;
			}

		}
		return W;
	}
};

//discuss 内容

    int findMaximizedCapital(int k, int W, vector<int>& P, vector<int>& C) {
      priority_queue<int> low;      // P[i]'s within current W
      multiset<pair<int,int>> high; // (C[i],P[i])'s' outside current W
      
      for (int i = 0; i < P.size(); ++i) // initialize low and high
        if(P[i] > 0) if (C[i] <= W) low.push(P[i]); else high.emplace(C[i], P[i]);
    
      while (k-- && low.size()) { 
        W += low.top(), low.pop(); // greedy to work on most profitable first
        for (auto i = high.begin(); high.size() && i->first <= W; i = high.erase(i)) low.push(i->second);
      }
      return W;
    }
