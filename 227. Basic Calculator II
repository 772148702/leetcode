说来是中缀表达式转换成后缀表达式计算
久了没有遇到这种知识，我都忘记该怎么做这种题了。
首先要定义一个运算符的优先级。
每次遇到数的时候，要将数给压入到数的栈里去。
遇到运算符号的时候，比较与栈顶的符号的优先级。
1）如果栈顶的优先级>=该符号的优先级，我们就可以计算栈顶符号的优先级
2)如果栈顶符号的优先级低于该符号的优先级，我们要将该符号入栈
我的程序：结束的地方还是有bug 
  class Solution {
  public:
	  int f(char op, int a1, int a2) {
	
		  if (op == '+') {
			  return a1 + a2;
		  }
		  if (op == '*') {
			  return a1*a2;
		  }
		  if (op == '/') {
			  return a1 / a2;
		  }
		  if (op == '-') {
			  return a1 - a2;
		  }
	  }
	  int getint(string s, int i) {

	  }
	  int calculate(string s) {
		  stack<int> st;
		  stack<char> op;
		  map<char, int> M = { {'+',1},{'-',1},{'*',2 },{'/',2} };
		  int tmp = 0;
		  for (int i = 0; i<s.size();) {
			  int flag = 0;
			  while (isdigit(s[i])) {
				  tmp = tmp * 10 + s[i] - '0';
				i++;
				  flag = 1;
			  } 
			  if (flag) {
				  st.push(tmp);
				  tmp = 0;
				  continue;
			  }
			  if (s[i] == ' ') continue;
			  if (op.empty()) {
				  op.push(s[i++]);
				  continue;
			  }
			  char optmp = op.top();
			  if (M[optmp] >= M[s[i]]) {
				  op.pop();
				  int a2 = st.top();
				  st.pop();
				  int a1 = st.top();
				  st.pop();
				  st.push(f(optmp, a1, a2));
			  }
			 
		     op.push(s[i]);
			  i++;

			  
		
		  }  
		  while(!op.empty())
		  {
			  char optmp = op.top();
			  op.pop();
			  int a2 = st.top();
			  st.pop();
			  int a1 = st.top();
			  st.pop();
			  st.push(f(optmp, a1, a2));

		  }
		  return st.top();
	  }
  };
