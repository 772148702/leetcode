利用lambd表达式来进行排序
dp
class Solution {
 public:
	 int maxEnvelopes(vector<pair<int, int>>& envelopes) {
		 if (envelopes.size() == 0 || envelopes[0].first == NULL) return 0;

		 sort(envelopes.begin(), envelopes.end(), [](pair<int, int> p1, pair<int, int> p2) {
			 return p1.first<p2.first || (p1.first == p2.first&&p1.second<p2.second);
		 });
		/* for (int i = 0; i < envelopes.size(); i++) {
			 cout << envelopes[i].first << " " << envelopes[i].second << endl;
		 }*/
		 int ans = 1;
		 vector<int> dp(envelopes.size());
		 for (int i = 0; i<envelopes.size(); i++)
		 {
			 dp[i] = 1;
			 for (int j = 0; j<i; j++) {
				 if (envelopes[i].first>envelopes[j].first && envelopes[j].second<envelopes[i].second) {
					 dp[i] = max(dp[i], dp[j] + 1);
				 }
			 }
			 ans = max(ans, dp[i]);
		 }
		 return ans;
	 }
 };
